plugins {
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'eclipse-wtp'
    id 'java'
    id 'idea'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-social-twitter")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework:spring-messaging")
    compile("org.springframework.integration:spring-integration-java-dsl")
    compile("org.springframework.integration:spring-integration-amqp")
    compile("com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:${google_concurrentlinkedhashmap_version}")
    compile("org.webjars:jquery:${jquery_version}")
    compile("org.webjars:bootstrap:${bootstrap_version}")
    compile("org.webjars:mustachejs:${mustachejs_version}")
    compile("org.webjars:stomp-websocket:${stomp_websocket_version}")
    compile("org.webjars:sockjs-client:${sockjs_client_version}")
    compile("commons-beanutils:commons-beanutils:${commons_beanutisl_version}")
    compile("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

task zip(type:Zip) {
	from '.'
	into '.'
	exclude '.classpath'
	exclude '.project'
	exclude '.gradle'
	exclude '.settings'
	exclude 'bin'
	exclude 'build' 
	filter { line -> line.startsWith('twitter.consumerKey=') ? 'twitter.consumerKey=<<ask Twitter for a key>>' : line }
	filter { line -> line.startsWith('twitter.consumerSecret=') ? 'twitter.consumerSecret=<<ask Twitter for a key>>' : line }
	filter { line -> line.startsWith('twitter.accessToken=') ? 'twitter.accessToken=<<ask Twitter for a key>>' : line }
	filter { line -> line.startsWith('twitter.accessTokenSecret=') ? 'twitter.accessTokenSecret=<<ask Twitter for a key>>' : line }
}